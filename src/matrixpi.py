import config
from RGBMatrixEmulator import RGBMatrix, RGBMatrixOptions
from pathlib import Path
import time
from datetime import datetime

import plugins.pluginHandler as pluginHandler
from playlist import getPlaylist

ROOT_DIR = Path(__file__).resolve().parent.parent

# Options
MATRIX_CONFIG_FILE = ROOT_DIR / 'src/config/matrix_config.json'
SLEEPING_CONFIG_FILE = ROOT_DIR / 'src/config/sleeping_config.json'
PLAYLIST_CONFIG_FILE = ROOT_DIR / 'src/config/playlist_config.json'

TARGET_FRAMERATE = 60 # FPS

frameStorage = {}

# Load matrix config
matrixConfig = config.MatrixConfig(MATRIX_CONFIG_FILE)

if not matrixConfig.config:
    print("Invalid Config!")
    exit(1)

# Load sleeping config
sleepingConfig = config.SleepingConfig(SLEEPING_CONFIG_FILE)
if not sleepingConfig.config:
    print("Invalid Sleeping Config!")
    exit(1)


# Set up plugins
pluginHandler.loadPlugins(ROOT_DIR / 'src/plugins')
pluginHandler.initialisePlugins(FPS=TARGET_FRAMERATE)

pluginInstances = pluginHandler.PLUGIN_INSTANCES
pluginNames = pluginInstances.keys()

# Initialise frame storage for each plugin
for pluginName in pluginNames:
    if pluginName not in frameStorage:
        frameStorage[pluginName] = {"frames": [], "frameCounter": 0}
        

# Load playlist config
playlistConfig = config.PlaylistConfig(PLAYLIST_CONFIG_FILE, pluginNames)
if not playlistConfig.config:
    print("Invalid Playlist Config!")
    exit(1)

# Set up the matrix
options = RGBMatrixOptions()
options.rows = matrixConfig.config['matrixHeight'] # height of the display
options.cols = matrixConfig.config['matrixWidth'] # width of the display
options.parallel = 1
options.led_rgb_sequence = matrixConfig.config['matrixColourMapping']
options.hardware_mapping = matrixConfig.config['matrixDriver']

matrix = RGBMatrix(options = options)

pluginCheckTimer = -1
playlistPluginIndex = 0
activePlaylist = None
playlistInterval = -1
activePlugin = None

nextPluginSwitchTime = time.time()  # When to switch plugin
frameCounter = 0


while True:
    startTime = time.time()

    if time.time() >= nextPluginSwitchTime:
        currentTime = datetime.now().time()
        activePlaylist, playlistInterval = getPlaylist(playlistConfig, currentTime)

        if not activePlaylist:
            print("No active playlist found for the current time.")
            time.sleep(1)
            continue

        if playlistPluginIndex >= len(activePlaylist):
            playlistPluginIndex = 0
            
        if activePlugin == activePlaylist[playlistPluginIndex]:
            print(f"Already using plugin: {activePlugin}")
        else:
            # If this is the initial switch, do not save the frame counter
            if activePlugin is not None:
                # Save the frame counter of the plugin
                frameStorage[activePlugin]['frameCounter'] = frameCounter
                
            # Switch plugin
            activePlugin = activePlaylist[playlistPluginIndex]
            
            # Set the frame counter
            frameCounter = frameStorage[activePlugin]['frameCounter']
            
            print(f"Switching to plugin: {activePlugin}")            

        playlistPluginIndex += 1
        
        nextPluginSwitchTime = time.time() + playlistInterval  # Schedule next switch
        
    if frameCounter >= len(frameStorage[activePlugin]['frames']):
        # Generate more frames
        frameStorage[activePlugin]['frames'] = pluginInstances[activePlugin].generateFrameSequence()
        
        # Reset frame counter
        frameCounter = 0
        
        
        if not frameStorage[activePlugin]:
            print(f"No frames generated by plugin: {activePlugin}")
            continue
        
        
        
    # Handle sleeping mode
    if sleepingConfig.isSleeping():
        matrix.brightness = sleepingConfig.config.get('brightness', 10)
    else:
        matrix.brightness = 100


    # Get the current frame for the active plugin
    currentFrame = frameStorage[activePlugin]['frames'][frameCounter]
    
    # Render the current frame
    matrix.SetImage(currentFrame.convert('RGB'), 0, 0)


    endTime = time.time()
    elapsedTime = endTime - startTime
    sleepTime = max(0, (1 / TARGET_FRAMERATE) - elapsedTime)
    
    frameCounter += 1
    time.sleep(sleepTime)


